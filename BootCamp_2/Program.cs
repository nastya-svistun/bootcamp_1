//Урок 2. Алгоритмы в C# . Эффективность алгоритма

/* виды алгоритмов:
1. константные O(1) решается одним действием
2. логарифмические O(log2(n))
3. линейные O(n) решаются повторением n действий
4. линейно-логарифмические O(log2(n)) * n (быстрая сортировка(буткемп 8))
5. квадратичные O(n^2) (for в for'е)
6. кубические O(n^3) (for в for'е, в for'е)
*7. задача о комивояжере (N!)* (не рекомендовано)

лекции по С# (последовательность фибоначчи) O(2^n)
*/

/*// напишите программу, которая принимает на вход одно число и возвращает сумму чисел от 1 до N константным видом адгоритма
Console.Clear();
Console.Write("введите число: ");
int n = int.Parse(Console.ReadLine()!);
System.Console.WriteLine(((1 + n) / 2.0) * n);
// Sn = ((a0 + an)/2) * n = ((1 + n) / 2) * n
*/

/*// напишите программу, которая принимает на вход одно число и возвращает сумму чисел от 1 до N линейным видом адгоритма
Console.Clear();
Console.Write("введите число: ");
int n = int.Parse(Console.ReadLine()!), result = 0;
for (int i = 1; i <= n; i++)
    result += i;
System.Console.WriteLine($"сумма чисел от 1 до {n} = {result}");
*/

/*//бинарный поиск (для логарифмического вида алгоритма):
//67
// это число больше, чем (1 + 100) / 2 = 50? да
// это число больше, чем (50 + 100) / 2 = 75? нет
// это число больше, чем (50 + 75) / 2 = 62? да
// это число больше, чем (62 + 75) / 2 = 68? нет
// это число больше, чем (62 + 68) / 2 = 65? да
// это число больше, чем (65 + 68) / 2 = 66? да
// это число больше, чем (66 + 68) / 2 = 67? нет
//(66, 67)
// 100 вариантов(n) - log2(100) = 7
// 2^7 = 128
*/

/*//алгоритм пузырьковой сортировки
Console.Clear();
Console.Write("введите кол-во элементов: ");
int n = int.Parse(Console.ReadLine()!);
int[] array = new int[n];
for (int i = 0; i < array.Length; i++)
    array[i] = new Random().Next(-20, 21);
System.Console.WriteLine($"начальный массив: [{string.Join(", ", array)}]");
for (int i = 0; i < array.Length; i++)
{
    for (int j = 0; j < array.Length - 1 - i; j++)
    {
        if (array[j] > array[j + 1])
            (array[j], array[j + 1]) = (array[j + 1], array[j]);
    }
}
System.Console.WriteLine($"конечный массив: [{string.Join(", ", array)}]");
*/

/*// последовательность фибоначчи
int fib(int n) // рекрсия
{
    if (n == 0)
        return 0;
    if (n == 1)
        return 1;
    return fib(n - 1) + fib(n - 2);
}

Console.Clear();
Console.Write("введите число: ");
int n = int.Parse(Console.ReadLine()!), a0 = 0, a1 = 1, x;

for (int i = 0; i < n; i++)
{
    x = a0 + a1;
    a0 = a1;
    a1 = x;
}
System.Console.WriteLine($"I - {a0}"); //O(39)
System.Console.WriteLine($"II (рекурсия) - {fib(n)}"); //считается дольше O(2 ^ 39)
*/

/*//объяснение алгоритма быстрой сортировки
[5, 4, 0, 2, 1]
опорный элемент - 5
первый массив < 5 [4, 0, 2, 1]
второй массив = 5 [5]
третий массив > 5 []

[4, 0, 2, 1]
опорный элемент - 4
первый массив < 4 [0, 2, 1]
второй массив = 4 [4]
третий массив > 4 []

[0, 2, 1]
опорный элемент - 0
первый массив < 0 []
второй массив = 0 [0]
третий массив > 0 [2, 1]
*/